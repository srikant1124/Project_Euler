//
//  ElectronicsShopTests.swift
//  ProjectEulerTests
//
//  Created by Kumar jena, Srikant - Srikant on 4/11/20.
//  Copyright Â© 2020 Kumar jena, Srikant - Srikant. All rights reserved.
//

import XCTest
@testable import Project_Euler

struct ElectronicsShopInput {
    var keyboards: [Int] = []
    var drives: [Int] = []
    var amount = 0
    var output = 0
}

class ElectronicsShopTests: XCTestCase {
    var problem: ElectronicsShop!
    var inputs: [ElectronicsShopInput] = []
    var testCase = 1
    
    override func setUp() {
        super.setUp()
        problem = ElectronicsShop()
        prepareInput()
    }

    override func tearDown() {
        super.tearDown()
        problem = nil
    }

    func prepareInput() {
      let keyboardsString
        
        
        let driversString
         
        let input1 = ElectronicsShopInput(keyboards: [3, 1], drives: [5, 2, 8], amount: 10, output: 9)
        let input2 = ElectronicsShopInput(keyboards: [4], drives: [5], amount: 5, output: -1)
        let input4 = ElectronicsShopInput(keyboards: [40, 50, 60], drives: [5, 8, 12], amount: 60, output: 58)
        let keyboardPrices = InputUtility.getArrayValues(values: keyboardsString)
        let driverPrices = InputUtility.getArrayValues(values: driversString)
        let input3 = ElectronicsShopInput(keyboards: keyboardPrices, drives: driverPrices, amount: 5, output: -1)

        inputs = [input3, input4]
        
    }

    func testPerformanceExample() {
        // This is an example of a performance test case.
        if inputs.isEmpty {
            XCTAssertFalse(false, "Input is Empty")
        }
        self.measure {
            for test in inputs {
                let result = problem.getMoneySpent(keyboards: test.keyboards, drives: test.drives, b: test.amount)
                XCTAssertEqual(result, test.output, "Case: \(testCase) Output = \(test.output) Wrong Output = \(result)")
                testCase += 1
            }
        }
    }
    
    func testNotBestPerformanceExample() {
        // This is an example of a performance test case.
        if inputs.isEmpty {
            XCTAssertFalse(false, "Input is Empty")
        }
        self.measure {
            for test in inputs {
                let result = problem.notbest_getMoneySpent(keyboards: test.keyboards, drives: test.drives, b: test.amount)
                XCTAssertEqual(result, test.output, "Case: \(testCase) Output = \(test.output) Wrong Output = \(result)")
                testCase += 1
            }
        }
    }

}
